// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MockCRM.Data;

#nullable disable

namespace MockCRM.Migrations
{
    [DbContext(typeof(CrmDbContext))]
    [Migration("20250615203929_AddNOTificationsTable")]
    partial class AddNOTificationsTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MockCRM.Models.ContactHistory", b =>
                {
                    b.Property<int>("ContactHistoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ContactHistoryID"));

                    b.Property<DateTime>("ContactDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ContactMethod")
                        .HasColumnType("int");

                    b.Property<string>("ContactType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<int>("CustomerID")
                        .HasColumnType("int");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<DateTime?>("FollowUpDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Outcome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ContactHistoryID");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("CustomerID");

                    b.ToTable("ContactHistories");

                    b.HasData(
                        new
                        {
                            ContactHistoryID = 10,
                            ContactDate = new DateTime(2024, 6, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ContactMethod = 1,
                            ContactType = "Email",
                            CreatedByUserId = 2,
                            CustomerID = 1,
                            Duration = 30,
                            FollowUpDate = new DateTime(2025, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Notes = "Initial contact",
                            Outcome = "Interested"
                        },
                        new
                        {
                            ContactHistoryID = 20,
                            ContactDate = new DateTime(2024, 6, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ContactMethod = 0,
                            ContactType = "Phone",
                            CreatedByUserId = 3,
                            CustomerID = 2,
                            Duration = 15,
                            FollowUpDate = new DateTime(2025, 6, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Notes = "Follow-up call",
                            Outcome = "No answer"
                        },
                        new
                        {
                            ContactHistoryID = 30,
                            ContactDate = new DateTime(2024, 6, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ContactMethod = 2,
                            ContactType = "Meeting",
                            CreatedByUserId = 5,
                            CustomerID = 3,
                            Duration = 60,
                            Notes = "Demo presented",
                            Outcome = "Considering"
                        },
                        new
                        {
                            ContactHistoryID = 40,
                            ContactDate = new DateTime(2024, 6, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ContactMethod = 3,
                            ContactType = "VideoCall",
                            CreatedByUserId = 3,
                            CustomerID = 4,
                            Duration = 10,
                            FollowUpDate = new DateTime(2025, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Notes = "Sent proposal",
                            Outcome = "Waiting"
                        },
                        new
                        {
                            ContactHistoryID = 50,
                            ContactDate = new DateTime(2024, 6, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ContactMethod = 0,
                            ContactType = "Phone",
                            CreatedByUserId = 2,
                            CustomerID = 5,
                            Duration = 45,
                            FollowUpDate = new DateTime(2025, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Notes = "Negotiation",
                            Outcome = "Deal closed"
                        },
                        new
                        {
                            ContactHistoryID = 60,
                            ContactDate = new DateTime(2024, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ContactMethod = 1,
                            ContactType = "Email",
                            CreatedByUserId = 1,
                            CustomerID = 1,
                            Duration = 5,
                            FollowUpDate = new DateTime(2024, 7, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Notes = "Follow-up overdue",
                            Outcome = "No response"
                        },
                        new
                        {
                            ContactHistoryID = 70,
                            ContactDate = new DateTime(2024, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ContactMethod = 2,
                            ContactType = "InPerson",
                            CreatedByUserId = 4,
                            CustomerID = 2,
                            Duration = 90,
                            Notes = "On-site visit",
                            Outcome = "Demo scheduled"
                        },
                        new
                        {
                            ContactHistoryID = 80,
                            ContactDate = new DateTime(2024, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ContactMethod = 3,
                            ContactType = "VideoCall",
                            CreatedByUserId = 5,
                            CustomerID = 3,
                            Duration = 20,
                            FollowUpDate = new DateTime(2024, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Notes = "Remote support",
                            Outcome = "Resolved"
                        },
                        new
                        {
                            ContactHistoryID = 90,
                            ContactDate = new DateTime(2024, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ContactMethod = 0,
                            ContactType = "Phone",
                            CreatedByUserId = 2,
                            CustomerID = 4,
                            Duration = 25,
                            Notes = "Contract renewal",
                            Outcome = "Renewed"
                        },
                        new
                        {
                            ContactHistoryID = 100,
                            ContactDate = new DateTime(2024, 11, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ContactMethod = 1,
                            ContactType = "Email",
                            CreatedByUserId = 1,
                            CustomerID = 5,
                            Duration = 10,
                            FollowUpDate = new DateTime(2024, 11, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Notes = "Feedback requested",
                            Outcome = "Positive"
                        });
                });

            modelBuilder.Entity("MockCRM.Models.Customer", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int?>("AssignedSalesRepId")
                        .HasColumnType("int");

                    b.Property<string>("Company")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastContactDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Priority")
                        .HasColumnType("int");

                    b.Property<int?>("Revenue")
                        .HasColumnType("int");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("AssignedSalesRepId");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            AssignedSalesRepId = 3,
                            Company = "Acme",
                            CreatedDate = new DateTime(2024, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "contact.acme@gmail.com",
                            LastContactDate = new DateTime(2024, 6, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Acme Corp",
                            Phone = "+91 9123456789",
                            Priority = 0,
                            Revenue = 100000,
                            Status = 0
                        },
                        new
                        {
                            ID = 2,
                            AssignedSalesRepId = 5,
                            Company = "Beta",
                            CreatedDate = new DateTime(2024, 6, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "info.beta@gmail.com",
                            LastContactDate = new DateTime(2024, 6, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Beta LLC",
                            Phone = "+91 9234567890",
                            Priority = 1,
                            Revenue = 50000,
                            Status = 2
                        },
                        new
                        {
                            ID = 3,
                            AssignedSalesRepId = 3,
                            Company = "Gamma",
                            CreatedDate = new DateTime(2024, 6, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "hello.gamma@gmail.com",
                            LastContactDate = new DateTime(2024, 6, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Gamma Inc",
                            Phone = "+91 9345678901",
                            Priority = 2,
                            Status = 1
                        },
                        new
                        {
                            ID = 4,
                            Company = "Delta",
                            CreatedDate = new DateTime(2024, 6, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "support.delta@gmail.com",
                            Name = "Delta Ltd",
                            Priority = 1,
                            Revenue = 75000,
                            Status = 0
                        },
                        new
                        {
                            ID = 5,
                            AssignedSalesRepId = 2,
                            CreatedDate = new DateTime(2024, 6, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "contact.epsilon@gmail.com",
                            LastContactDate = new DateTime(2024, 6, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Epsilon GmbH",
                            Phone = "+91 9456789012",
                            Priority = 0,
                            Revenue = 120000,
                            Status = 2
                        });
                });

            modelBuilder.Entity("MockCRM.Models.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<bool>("isRead")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("MockCRM.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Role")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(2);

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "alice@gmail.com",
                            PasswordHash = "hash1",
                            Role = 0,
                            Username = "alice"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2024, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "bob@gmail.com",
                            PasswordHash = "hash2",
                            Role = 1,
                            Username = "bob"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2024, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "carol@gmail.com",
                            PasswordHash = "hash3",
                            Role = 2,
                            Username = "carol"
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2024, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "dave@gmail.com",
                            PasswordHash = "hash4",
                            Role = 3,
                            Username = "dave"
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2024, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "eve@gmail.com",
                            PasswordHash = "hash5",
                            Role = 2,
                            Username = "eve"
                        });
                });

            modelBuilder.Entity("MockCRM.Models.ContactHistory", b =>
                {
                    b.HasOne("MockCRM.Models.User", "CreatedByUser")
                        .WithMany("ContactHistoriesCreatedbyUser")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MockCRM.Models.Customer", "Customer")
                        .WithMany("ContactHistories")
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("MockCRM.Models.Customer", b =>
                {
                    b.HasOne("MockCRM.Models.User", "AssignedSalesRep")
                        .WithMany("AssignedCustomers")
                        .HasForeignKey("AssignedSalesRepId");

                    b.Navigation("AssignedSalesRep");
                });

            modelBuilder.Entity("MockCRM.Models.Customer", b =>
                {
                    b.Navigation("ContactHistories");
                });

            modelBuilder.Entity("MockCRM.Models.User", b =>
                {
                    b.Navigation("AssignedCustomers");

                    b.Navigation("ContactHistoriesCreatedbyUser");
                });
#pragma warning restore 612, 618
        }
    }
}
